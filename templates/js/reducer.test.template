import {
{{#each actions}}
  {{camelCase @root.name this.init}},
  {{camelCase @root.name this.ok}},
  {{camelCase @root.name this.err}},
{{/each}}
} from '{{filePaths.actions}}';
import { {{camelCase name}}Reducer } from '{{filePaths.reducer}}';

describe("{{filePaths.reducer}}  tests", () => {
{{#each actions}}
  it('should update the state properly for {{camelCase @root.name this.init}}', () => {
    const given = {
      pending: false,
      data: { dummy: "state" },
      error: undefined
    };

    const action = {{camelCase @root.name this.init}}({ dummy: "payload" });

    const expected = {
      pending: true,
      data: { dummy: "state" },
      error: undefined
    };

    expect({{camelCase @root.name}}Reducer(given, action)).toEqual(expected);
  });

  it('should update the state properly for {{camelCase @root.name this.ok}}', () => {
    const given = {
      pending: true,
      data: undefined,
      error: undefined
    };

    const action = {{camelCase @root.name this.ok}}({ dummy: "payload" });

    const expected = {
      pending: false,
      data: { dummy: "payload" },
      error: undefined
    };

    expect({{camelCase @root.name}}Reducer(given, action)).toEqual(expected);
  });

  it('should update the state properly for {{camelCase @root.name this.err}}', () => {
    const given = {
      pending: true,
      data: { dummy: "state" },
      error: undefined
    };

    const action = {{camelCase @root.name this.err}}({ payload: "error" });

    const expected = {
      pending: false,
      data: { dummy: "state" },
      error: "error"
    };

    expect({{camelCase @root.name}}Reducer(given, action)).toEqual(expected);
  });
{{/each}}
});
