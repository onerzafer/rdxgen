import {
    {{pascalName name}}ActionTypes,
    {{#each actions}}
      {{camelCase this.init}},
      {{camelCase this.ok}},
      {{camelCase this.err}},
    {{/each}}
} from '{{filePaths.actions}}';
import {
    {{#each actions}}
        {{pascalCase this.ok}}Payload,
    {{/each}}
} from '{{filePaths.interfaces}}';


describe("{{filePaths.actions}} tests", () => {
{{#each actions}}
  it("should has the correct type and payload for {{camelCase this.init}}", () => {
    const given = { some: "dummy" };
    const expected = { type: {{camelCase @root.name}}ActionTypes.{{constantCase this.init}}, payload: { some: "dummy" } };

    expect({{camelCase this.init}}(given)).toStrictEqual(expected);
  });

  it("should has the correct type and payload for {{camelCase this.ok}}", () => {
    const given = { some: "dummy" } as {{pascalCase this.ok}}Payload;
    const expected = { type: {{camelCase @root.name}}ActionTypes.{{constantCase this.ok}}, payload: { some: "dummy" } };

    expect({{camelCase this.ok}}(given)).toStrictEqual(expected);
  });

  it("should has the correct type and payload for {{camelCase this.err}}", () => {
    const given = { some: "dummy" };
    const expected = { type: {{camelCase @root.name}}ActionTypes.{{constantCase this.err}}, payload: { some: "dummy" } };

    expect({{camelCase this.err}}(given)).toStrictEqual(expected);
  });
{{/each}}
});
